function [fitresult,gof]=createFits(halphaQuartz,TalphaQuartz,...
                                    hbetaQuartz,TbetaQuartz,...
                                    halphaTri,TalphaTri,...
                                    hbetaTri,TbetaTri,...
                                    halphaCri,TalphaCri,...
                                    hbetaCri,TbetaCri)
%CREATEFITS(HALPHA,TALPHA,HBETA,TBETA)
%  Create fits.
%
%  Data for 'alphaQuartzT(h)' fit:
%      X Input : halphaQuartz
%      Y Output: TalphaQuartz
%  Data for 'betaQuartzT(h)' fit:
%      X Input : hbetaQuartz
%      Y Output: TbetaQuartz
%  Data for 'alphaTriT(h)' fit:
%      X Input : halphaTri
%      Y Output: TalphaTri
%  Data for 'betaTriT(h)' fit:
%      X Input : hbetaTri
%      Y Output: TbetaTri
%  Data for 'alphaCriT(h)' fit:
%      X Input : halphaCri
%      Y Output: TalphaCri
%  Data for 'betaCriT(h)' fit:
%      X Input : hbetaCri
%      Y Output: TbetaCri
%  Data for 'alphaTriH(T)' fit:
%      X Input : TalphaTri
%      Y Output: halphaTri
%  Data for 'betaTriH(T)' fit:
%      X Input : TbetaTri
%      Y Output: hbetaTri
%  Data for 'alphaCriH(T)' fit:
%      X Input : TalphaCri
%      Y Output: halphaCri
%  Data for 'betaCriH(T)' fit:
%      X Input : TbetaCri
%      Y Output: hbetaCri
%  Output:
%      fitresult : a cell-array of fit objects representing the fits.
%      gof : structure array with goodness-of fit info.
%
%  See also FIT, CFIT, SFIT.
 
%  Auto-generated by MATLAB on 10-Jun-2023 18:54:34


%% Initialization.

% Initialize arrays to store fits and goodness-of-fit.
fitresult = cell( 10, 1 );
gof = struct( 'sse', cell( size(fitresult) ), ...
    'rsquare', [], 'dfe', [], 'adjrsquare', [], 'rmse', [] );
 

%% Fit: 'alphaQuartzT(h)'.
[xData, yData] = prepareCurveData( halphaQuartz, TalphaQuartz );

% Set up fittype and options.
ft = fittype( 'poly8' );

% Fit model to data.
[fitresult{1}, gof(1)] = fit( xData, yData, ft, 'Normalize', 'on' );

% Plot fit with data.
figure( 'Name', 'alphaQuartzT(h)' );
h = plot( fitresult{1}, xData, yData );
legend( h, 'TalphaQuartz vs. halphaQuartz', 'alphaQuartzT(h)', 'Location', 'NorthEast', 'Interpreter', 'none' );
% Label axes
xlabel( 'halphaQuartz', 'Interpreter', 'none' );
ylabel( 'TalphaQuartz', 'Interpreter', 'none' );
grid on


%% Fit: 'betaQuartzT(h)'.
[xData, yData] = prepareCurveData( hbetaQuartz, TbetaQuartz );

% Set up fittype and options.
ft = fittype( 'poly2' );

% Fit model to data.
[fitresult{2}, gof(2)] = fit( xData, yData, ft, 'Normalize', 'on' );

% Plot fit with data.
figure( 'Name', 'betaQuartzT(h)' );
h = plot( fitresult{2}, xData, yData );
legend( h, 'TbetaQuartz vs. hbetaQuartz', 'betaQuartzT(h)', 'Location', 'NorthEast', 'Interpreter', 'none' );
% Label axes
xlabel( 'hbetaQuartz', 'Interpreter', 'none' );
ylabel( 'TbetaQuartz', 'Interpreter', 'none' );
grid on


%% Fit: 'alphaTriT(h)'.
[xData, yData] = prepareCurveData( halphaTri, TalphaTri );

% Set up fittype and options.
ft = fittype( 'poly2' );

% Fit model to data.
[fitresult{3}, gof(3)] = fit( xData, yData, ft );

% Plot fit with data.
figure( 'Name', 'alphaTriT(h)' );
h = plot( fitresult{3}, xData, yData );
legend( h, 'TalphaTri vs. halphaTri', 'alphaTriT(h)', 'Location', 'NorthEast', 'Interpreter', 'none' );
% Label axes
xlabel( 'halphaTri', 'Interpreter', 'none' );
ylabel( 'TalphaTri', 'Interpreter', 'none' );
grid on


%% Fit: 'betaTriT(h)'.
[xData, yData] = prepareCurveData( hbetaTri, TbetaTri );

% Set up fittype and options.
ft = fittype( 'poly3' );

% Fit model to data.
[fitresult{4}, gof(4)] = fit( xData, yData, ft, 'Normalize', 'on' );

% Plot fit with data.
figure( 'Name', 'betaTriT(h)' );
h = plot( fitresult{4}, xData, yData );
legend( h, 'TbetaTri vs. hbetaTri', 'betaTriT(h)', 'Location', 'NorthEast', 'Interpreter', 'none' );
% Label axes
xlabel( 'hbetaTri', 'Interpreter', 'none' );
ylabel( 'TbetaTri', 'Interpreter', 'none' );
grid on


%% Fit: 'alphaCriT(h)'.
[xData, yData] = prepareCurveData( halphaCri, TalphaCri );

% Set up fittype and options.
ft = fittype( 'poly9' );
opts = fitoptions( 'Method', 'LinearLeastSquares' );
opts.Normalize = 'on';
opts.Robust = 'LAR';

% Fit model to data.
[fitresult{5}, gof(5)] = fit( xData, yData, ft, opts );

% Plot fit with data.
figure( 'Name', 'alphaCriT(h)' );
h = plot( fitresult{5}, xData, yData );
legend( h, 'TalphaCri vs. halphaCri', 'alphaCriT(h)', 'Location', 'NorthEast', 'Interpreter', 'none' );
% Label axes
xlabel( 'halphaCri', 'Interpreter', 'none' );
ylabel( 'TalphaCri', 'Interpreter', 'none' );
grid on


%% Fit: 'betaCriT(h)'.
[xData, yData] = prepareCurveData( hbetaCri, TbetaCri );

% Set up fittype and options.
ft = fittype( 'poly3' );

% Fit model to data.
[fitresult{6}, gof(6)] = fit( xData, yData, ft, 'Normalize', 'on' );

% Plot fit with data.
figure( 'Name', 'betaCriT(h)' );
h = plot( fitresult{6}, xData, yData );
legend( h, 'TbetaCri vs. hbetaCri', 'betaCriT(h)', 'Location', 'NorthEast', 'Interpreter', 'none' );
% Label axes
xlabel( 'hbetaCri', 'Interpreter', 'none' );
ylabel( 'TbetaCri', 'Interpreter', 'none' );
grid on


%% Fit: 'alphaTriH(T)'.
[xData, yData] = prepareCurveData( TalphaTri, halphaTri );

% Set up fittype and options.
ft = fittype( 'poly2' );

% Fit model to data.
[fitresult{7}, gof(7)] = fit( xData, yData, ft );

% Plot fit with data.
figure( 'Name', 'alphaTriH(T)' );
h = plot( fitresult{7}, xData, yData );
legend( h, 'halphaTri vs. TalphaTri', 'alphaTriH(T)', 'Location', 'NorthEast', 'Interpreter', 'none' );
% Label axes
xlabel( 'TalphaTri', 'Interpreter', 'none' );
ylabel( 'halphaTri', 'Interpreter', 'none' );
grid on


%% Fit: 'betaTriH(T)'.
[xData, yData] = prepareCurveData( TbetaTri, hbetaTri );

% Set up fittype and options.
ft = fittype( 'poly3' );

% Fit model to data.
[fitresult{8}, gof(8)] = fit( xData, yData, ft, 'Normalize', 'on' );

% Plot fit with data.
figure( 'Name', 'betaTriH(T)' );
h = plot( fitresult{8}, xData, yData );
legend( h, 'hbetaTri vs. TbetaTri', 'betaTriH(T)', 'Location', 'NorthEast', 'Interpreter', 'none' );
% Label axes
xlabel( 'TbetaTri', 'Interpreter', 'none' );
ylabel( 'hbetaTri', 'Interpreter', 'none' );
grid on


%% Fit: 'alphaCriH(T)'.
[xData, yData] = prepareCurveData( TalphaCri, halphaCri );

% Set up fittype and options.
ft = fittype( 'poly3' );

% Fit model to data.
[fitresult{9}, gof(9)] = fit( xData, yData, ft );

% Plot fit with data.
figure( 'Name', 'alphaCriH(T)' );
h = plot( fitresult{9}, xData, yData );
legend( h, 'halphaCri vs. TalphaCri', 'alphaCriH(T)', 'Location', 'NorthEast', 'Interpreter', 'none' );
% Label axes
xlabel( 'TalphaCri', 'Interpreter', 'none' );
ylabel( 'halphaCri', 'Interpreter', 'none' );
grid on


%% Fit: 'betaCriH(T)'.
[xData, yData] = prepareCurveData( TbetaCri, hbetaCri );

% Set up fittype and options.
ft = fittype( 'poly3' );

% Fit model to data.
[fitresult{10}, gof(10)] = fit( xData, yData, ft, 'Normalize', 'on' );

% Plot fit with data.
figure( 'Name', 'betaCriH(T)' );
h = plot( fitresult{10}, xData, yData );
legend( h, 'hbetaCri vs. TbetaCri', 'betaCriH(T)', 'Location', 'NorthEast', 'Interpreter', 'none' );
% Label axes
xlabel( 'TbetaCri', 'Interpreter', 'none' );
ylabel( 'hbetaCri', 'Interpreter', 'none' );
grid on


